<form id="taskForm">
  <div class="form-group">
    <label for="taskTitle">Task Title</label>
    <input type="text" class="form-control" id="taskTitle" placeholder="Enter task title" required>
  </div>
  
  <div class="form-group">
    <label for="taskDescription">Description</label>
    <textarea class="form-control" id="taskDescription" rows="3" placeholder="Enter task description" required></textarea>
  </div>
  
  <div class="form-group">
    <label for="taskDueDate">Due Date</label>
    <input type="datetime-local" class="form-control" id="taskDueDate" required>
  </div>
  
  <div class="form-group">
    <label for="taskPriority">Priority</label>
    <select class="form-control" id="taskPriority" required>
      <option value="0">Low</option>
      <option value="1">Medium</option>
      <option value="2">High</option>
    </select>
  </div>
  
  <div class="form-group">
    <label for="taskStatus">Status</label>
    <select class="form-control" id="taskStatus" required>
      <option value="0">Not Started</option>
      <option value="1">In Progress</option>
      <option value="2">Completed</option>
    </select>
  </div>
  
  <div class="form-group">
    <label for="assignedTo">Assigned To</label>
    <input type="text" class="form-control" id="assignedTo" placeholder="Enter assignee's name" required>
  </div>

    <button type="submit" class="btn btn-primary" @onclick="HandleButtonClick">Create Task</button>
</form>


@code {
    // Define an EventCallback to notify parent components
    [Parameter] public EventCallback OnButtonClick { get; set; }

    // Method to handle button click
    private async Task HandleButtonClick()
    {
        // Invoke the callback to notify the parent that the button was clicked
        await OnButtonClick.InvokeAsync();
    }
}
