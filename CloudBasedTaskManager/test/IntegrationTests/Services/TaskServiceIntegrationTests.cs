using Core.DTOs;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using WebAPI.Services;
using WebAPI.Services.Interfaces;
using TaskStatus = Core.DTOs.TaskStatus;

namespace IntegrationTests.Services
{
    public class TaskServiceIntegrationTests
    {
        private readonly AppDbContext _dbContext;
        private readonly ITaskService _taskService;

        public TaskServiceIntegrationTests()
        {
            // Set up an in-memory database for testing
            var options = new DbContextOptionsBuilder<AppDbContext>()
                .UseInMemoryDatabase(databaseName: "TestTaskDatabase")
                .Options;

            _dbContext = new AppDbContext(options);

            // Ensure the database is created
            _dbContext.Database.EnsureCreated();

            // Set up the TaskRepository and TaskService
            var taskRepository = new TaskRepository(_dbContext);
            _taskService = new TaskService(taskRepository);
        }

        [Fact]
        public async Task CreateAsync_ValidTask_AddsTaskToDatabase()
        {
            // Arrange
            var taskDto = new TaskDTO
            {
                Id = 0, // Will be generated by EF Core
                Title = "Test Task Title",
                Description = "This is a test task description.",
                DueDate = DateTime.UtcNow.AddDays(1),
                Priority = TaskPriority.Medium,
                Status = TaskStatus.ToDo,
                AssignedTo = "Test User"
            };

            // Act
            var createdTask = await _taskService.CreateAsync(taskDto);

            // Assert
            Assert.NotNull(createdTask);
            Assert.Equal(taskDto.Title, createdTask.Title);
            Assert.Equal(taskDto.Description, createdTask.Description);
            Assert.Equal(taskDto.Priority, createdTask.Priority);

            // Check if the task was added to the database
            var taskInDb = await _dbContext.Tasks.FindAsync(createdTask.Id);
            Assert.NotNull(taskInDb);
            Assert.Equal(taskDto.Title, taskInDb.Title);
        }

        [Fact]
        public async Task GetByIdAsync_ValidId_ReturnsTask()
        {
            // Arrange
            var taskDto = new TaskDTO
            {
                Id = 0,
                Title = "Test Task Title",
                Description = "This is a test task description.",
                DueDate = DateTime.UtcNow.AddDays(1),
                Priority = TaskPriority.Medium,
                Status = TaskStatus.ToDo,
                AssignedTo = "Test User"
            };

            var createdTask = await _taskService.CreateAsync(taskDto);

            // Act
            var fetchedTask = await _taskService.GetByIdAsync(createdTask.Id);

            // Assert
            Assert.NotNull(fetchedTask);
            Assert.Equal(createdTask.Title, fetchedTask.Title);
        }

        [Fact]
        public async Task DeleteAsync_ValidId_RemovesTaskFromDatabase()
        {
            // Arrange
            var taskDto = new TaskDTO
            {
                Id = 0,
                Title = "Test Task Title",
                Description = "This is a test task description.",
                DueDate = DateTime.UtcNow.AddDays(1),
                Priority = TaskPriority.Medium,
                Status = TaskStatus.ToDo,
                AssignedTo = "Test User"
            };

            var createdTask = await _taskService.CreateAsync(taskDto);
            var createdTaskId = createdTask.Id;

            // Act
            var deletedTask = await _taskService.DeleteAsync(createdTaskId);

            // Assert
            Assert.NotNull(deletedTask);
            Assert.Equal(createdTask.Title, deletedTask.Title);

            // Check if the task has been removed from the database
            var taskInDb = await _dbContext.Tasks.FindAsync(createdTaskId);
            Assert.Null(taskInDb);
        }

        // Clean up the database after tests
        public void Dispose()
        {
            _dbContext.Database.EnsureDeleted();
            _dbContext.Dispose();
        }
    }
}
